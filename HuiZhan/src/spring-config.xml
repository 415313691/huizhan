<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/cache
            http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!--  <import resource="spring-beans.xml" />-->
    <!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入-->
    <context:component-scan base-package="com.huizhan" />
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value=" jdbc:mysql://47.93.221.49:3306/dati?useUnicode=true&amp;characterEncoding=utf8" />
        <property name="username" value="root" />
        <property name="password" value="Abcd963"/>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.service.jdbc.connections.spi.provider_class">com.jolbox.bonecp.provider.BoneCPConnectionProvider</prop>
                <prop key="bonecp.partitionCount">5</prop>
                <prop key="bonecp.maxConnectionsPerPartition">10</prop>
                <prop key="bonecp.minConnectionsPerPartition">5</prop>
                <prop key="bonecp.acquireIncrement">3</prop><!-- #每次新增连接的数量 -->
                <prop key="bonecp.connectionTimeout">3000</prop><!-- #连接超时时间阀值，获取连接时，超出阀值时间，则获取失败，毫秒为单位 -->
                <prop key="bonecp.poolAvailabilityThreshold">2</prop><!-- #连接池阀值，当 可用连接/最大连接 < 连接阀值 时，创建新的连接 -->
                <!-- <prop key="bonecp.releaseHelperThreads">0</prop>#连接池助手线程数量，可设置为0，该参数会降低运行速度，但程序有大量连接时，有助于提升高并发程序的性能
                    <prop key="bonecp.statementReleaseHelperThreads">0</prop> 语句助手线程数，可设置为0，该参数会降低运行速度，但程序有大量的查询语句时，有助于提升高并发程序的性能 -->
                <prop key="bonecp.idleConnectionTestPeriod">5</prop><!-- 测试连接有效性的间隔时间，单位分钟 -->
                <prop key="bonecp.idleMaxAge">240</prop><!-- 连接的空闲存活时间，当连接空闲时间大于该阀值时，清除该连接 -->
                <prop key="bonecp.statementsCacheSize">5</prop><!-- 语句缓存个数 -->
                <prop key="hibernate.query.factory_class">org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
                </prop>
                <prop key="hibernate.connection.release_mode">auto</prop>
                <prop key="hibernate.autoReconnect">true</prop>
                <prop key="hibernate.connection.autocommit">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!--hibernate3  的配置<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>-->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://47.93.221.49:3306/dati</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>com.huizhan.entities</value>
            </list>
        </property>
    </bean>
    <!-- 事物配置开始 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="interceptorPointCuts" expression="execution(* com.huizhan.dao.*.*(..))" />
        <aop:advisor advice-ref="txAdvice"  pointcut-ref="interceptorPointCuts" />
    </aop:config>
    <!-- 事物配置结束 -->
    
      <!-- 缓存配置 -->  
        <!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->  
        <cache:annotation-driven cache-manager="cacheManager"/>  
        <!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->  
        <!--   
        <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">  
            <property name="caches">  
                <set>  
                    <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>  
                </set>  
            </property>  
        </bean>  
         -->  
        <!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->  
        <!-- Spring提供的基于的Ehcache实现的缓存管理器 -->  
        <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
            <property name="configLocation" value="classpath:ehcache.xml"/>  
        </bean>  
        <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">  
            <property name="cacheManager" ref="cacheManagerFactory"/>  
        </bean>  
</beans>